{"version":3,"sources":["django-material-frontend-profile.min.js","umd_local.js","smartcrop.js","profile.js"],"names":["_classCallCheck","instance","Constructor","TypeError","exports","edgeDetect","i","o","id","data","od","w","width","h","height","y","x","lightness","p","sample","skinDetect","options","cie","skin","skinColor","isSkinColor","skinThreshold","isSkinBrightness","skinBrightnessMin","skinBrightnessMax","saturationDetect","sat","saturation","acceptableLightness","saturationThreshold","saturationBrightnessMin","saturationBrightnessMax","applyBoosts","output","boost","length","applyBoost","x0","x1","y0","y1","weight","generateCrops","results","minDimension","min","cropWidth","cropHeight","scale","maxScale","minScale","scaleStep","step","push","score","crop","result","detail","total","downSample","scoreDownSample","invDownSample","outputHeightDownSample","outputWidthDownSample","outputWidth","importance","skinBias","saturationBias","detailWeight","skinWeight","saturationWeight","boostWeight","outsideImportance","px","abs","py","dx","Math","max","edgeRadius","dy","d","edgeWeight","s","sqrt","ruleOfThirds","thirds","r","g","b","mag","rd","gd","bd","analyse","input","ImgData","scoreOutput","topScore","Infinity","topCrop","crops","iLen","debug","debugOutput","debugOptions","debugTopCrop","extend","this","Uint8ClampedArray","factor","idata","iwidth","floor","ifactor2","a","mr","mg","mb","v","u","j","defaultCanvasFactory","c","document","createElement","canvasImageOperations","canvasFactory","open","image","naturalWidth","naturalHeight","ctx","getContext","drawImage","smartcrop","Promise","resolve","resample","then","getData","getImageData","arguments","arg","name","maximum","minumum","l","Error","DEFAULTS","aspect","prescale","imageOperations","inputImage","options_","callback","iop","map","isAvailable","_downSample","_canvasImageOperations","ceil","define","amd","navigator","window","SmartCrop","module","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","DMCProfilePage","root","_this","root_","uploadButton_","querySelector","avatar_","onChange","event","files","type","indexOf","showError","reader","FileReader","onload","readerEvent","Image","cropCanvas","src","toDataURL","upload","error","message","readAsDataURL","addEventListener","value","onSuccess","canvas","_this2","classList","toggle","xhr","XMLHttpRequest","location","search","setRequestHeader","getResponseHeader","snapshot","Turbolinks","Snapshot","wrap","response","href","controller","adapter","hideProgressBar","cache","put","visit","action","clearCache","status","disable","onerror","showProgressBarAfterDelay","toBlob","blob","formData","FormData","append","send","timeout","undefined","snackbarEvent","CustomEvent","dispatchEvent","removeEventListener","dmc","register"],"mappings":"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","file":"django-material-frontend-profile.min.js","sourcesContent":["var exports = {}; // eslint-disable-line\n\n/**\n * smartcrop.js\n * A javascript library implementing content aware image cropping\n *\n * Copyright (C) 2016 Jonas Wagner\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n(function() {\n'use strict';\n\nvar smartcrop = {};\n// Promise implementation to use\nsmartcrop.Promise = typeof Promise !== 'undefined' ? Promise : function() {\n  throw new Error('No native promises and smartcrop.Promise not set.');\n};\n\nsmartcrop.DEFAULTS = {\n  width: 0,\n  height: 0,\n  aspect: 0,\n  cropWidth: 0,\n  cropHeight: 0,\n  detailWeight: 0.2,\n  skinColor: [0.78, 0.57, 0.44],\n  skinBias: 0.01,\n  skinBrightnessMin: 0.2,\n  skinBrightnessMax: 1.0,\n  skinThreshold: 0.8,\n  skinWeight: 1.8,\n  saturationBrightnessMin: 0.05,\n  saturationBrightnessMax: 0.9,\n  saturationThreshold: 0.4,\n  saturationBias: 0.2,\n  saturationWeight: 0.3,\n  // Step * minscale rounded down to the next power of two should be good\n  scoreDownSample: 8,\n  step: 8,\n  scaleStep: 0.1,\n  minScale: 1.0,\n  maxScale: 1.0,\n  edgeRadius: 0.4,\n  edgeWeight: -20.0,\n  outsideImportance: -0.5,\n  boostWeight: 100.0,\n  ruleOfThirds: true,\n  prescale: true,\n  imageOperations: null,\n  canvasFactory: defaultCanvasFactory,\n  // Factory: defaultFactories,\n  debug: false,\n};\n\n\n\nsmartcrop.crop = function(inputImage, options_, callback) {\n  var options = extend({}, smartcrop.DEFAULTS, options_);\n\n  if (options.aspect) {\n    options.width = options.aspect;\n    options.height = 1;\n  }\n\n  if (options.imageOperations === null) {\n    options.imageOperations = canvasImageOperations(options.canvasFactory);\n  }\n\n  var iop = options.imageOperations;\n\n  var scale = 1;\n  var prescale = 1;\n\n  return iop.open(inputImage, options.input).then(function(image) {\n\n    if (options.width && options.height) {\n      scale = min(image.width / options.width, image.height / options.height);\n      options.cropWidth = ~~(options.width * scale);\n      options.cropHeight = ~~(options.height * scale);\n      // Img = 100x100, width = 95x95, scale = 100/95, 1/scale > min\n      // don't set minscale smaller than 1/scale\n      // -> don't pick crops that need upscaling\n      options.minScale = min(options.maxScale, max(1 / scale, options.minScale));\n\n      if (options.prescale !== false) {\n        prescale = 1 / scale / options.minScale;\n        if (prescale < 1) {\n          image = iop.resample(image, image.width * prescale, image.height * prescale);\n          options.cropWidth = ~~(options.cropWidth * prescale);\n          options.cropHeight = ~~(options.cropHeight * prescale);\n          if (options.boost) {\n            options.boost = options.boost.map(function(boost) {\n              return {\n                x: ~~(boost.x * prescale),\n                y: ~~(boost.y * prescale),\n                width: ~~(boost.width * prescale),\n                height: ~~(boost.height * prescale),\n                weight: boost.weight\n              };\n            });\n          }\n        }\n        else {\n          prescale = 1;\n        }\n      }\n    }\n    return image;\n  })\n  .then(function(image) {\n    return iop.getData(image).then(function(data) {\n      var result = analyse(options, data);\n\n      var crops = result.crops || [result.topCrop];\n      for (var i = 0, iLen = crops.length; i < iLen; i++) {\n        var crop = crops[i];\n        crop.x = ~~(crop.x / prescale);\n        crop.y = ~~(crop.y / prescale);\n        crop.width = ~~(crop.width / prescale);\n        crop.height = ~~(crop.height / prescale);\n      }\n      if (callback) callback(result);\n      return result;\n    });\n  });\n};\n\n\n// Check if all the dependencies are there\n// todo:\nsmartcrop.isAvailable = function(options) {\n  if (!smartcrop.Promise) return false;\n\n  var canvasFactory = options ? options.canvasFactory : defaultCanvasFactory;\n\n  if (canvasFactory === defaultCanvasFactory) {\n    var c = document.createElement('canvas');\n    if (!c.getContext('2d')) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction edgeDetect(i, o) {\n  var id = i.data;\n  var od = o.data;\n  var w = i.width;\n  var h = i.height;\n\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var p = (y * w + x) * 4;\n      var lightness;\n\n      if (x === 0 || x >= w - 1 || y === 0 || y >= h - 1) {\n        lightness = sample(id, p);\n      }\n      else {\n        lightness = sample(id, p) * 4 -\n            sample(id, p - w * 4) -\n            sample(id, p - 4) -\n            sample(id, p + 4) -\n            sample(id, p + w * 4);\n      }\n\n      od[p + 1] = lightness;\n    }\n  }\n}\n\nfunction skinDetect(options, i, o) {\n  var id = i.data;\n  var od = o.data;\n  var w = i.width;\n  var h = i.height;\n\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var p = (y * w + x) * 4;\n      var lightness = cie(id[p], id[p + 1], id[p + 2]) / 255;\n      var skin = skinColor(options, id[p], id[p + 1], id[p + 2]);\n      var isSkinColor = skin > options.skinThreshold;\n      var isSkinBrightness = lightness >= options.skinBrightnessMin && lightness <= options.skinBrightnessMax;\n      if (isSkinColor && isSkinBrightness) {\n        od[p] = (skin - options.skinThreshold) * (255 / (1 - options.skinThreshold));\n      }\n      else {\n        od[p] = 0;\n      }\n    }\n  }\n}\n\nfunction saturationDetect(options, i, o) {\n  var id = i.data;\n  var od = o.data;\n  var w = i.width;\n  var h = i.height;\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var p = (y * w + x) * 4;\n\n      var lightness = cie(id[p], id[p + 1], id[p + 2]) / 255;\n      var sat = saturation(id[p], id[p + 1], id[p + 2]);\n\n      var acceptableSaturation = sat > options.saturationThreshold;\n      var acceptableLightness = lightness >= options.saturationBrightnessMin &&\n          lightness <= options.saturationBrightnessMax;\n      if (acceptableLightness && acceptableLightness) {\n        od[p + 2] = (sat - options.saturationThreshold) * (255 / (1 - options.saturationThreshold));\n      }\n      else {\n        od[p + 2] = 0;\n      }\n    }\n  }\n}\n\nfunction applyBoosts(options, output) {\n  if (!options.boost) return;\n  var od = output.data;\n  for (var i = 0; i < output.width; i += 4) {\n    od[i + 3] = 0;\n  }\n  for (i = 0; i < options.boost.length; i++) {\n    applyBoost(options.boost[i], options, output);\n  }\n}\n\nfunction applyBoost(boost, options, output) {\n  var od = output.data;\n  var w = output.width;\n  var x0 = ~~boost.x;\n  var x1 = ~~(boost.x + boost.width);\n  var y0 = ~~boost.y;\n  var y1 = ~~(boost.y + boost.height);\n  var weight = boost.weight * 255;\n  for (var y = y0; y < y1; y++) {\n    for (var x = x0; x < x1; x++) {\n      var i = (y * w + x) * 4;\n      od[i + 3] += weight;\n    }\n  }\n}\n\nfunction generateCrops(options, width, height) {\n  var results = [];\n  var minDimension = min(width, height);\n  var cropWidth = options.cropWidth || minDimension;\n  var cropHeight = options.cropHeight || minDimension;\n  for (var scale = options.maxScale; scale >= options.minScale; scale -= options.scaleStep) {\n    for (var y = 0; y + cropHeight * scale <= height; y += options.step) {\n      for (var x = 0; x + cropWidth * scale <= width; x += options.step) {\n        results.push({\n          x: x,\n          y: y,\n          width: cropWidth * scale,\n          height: cropHeight * scale,\n        });\n      }\n    }\n  }\n  return results;\n}\n\nfunction score(options, output, crop) {\n  var result = {\n    detail: 0,\n    saturation: 0,\n    skin: 0,\n    boost: 0,\n    total: 0,\n  };\n\n  var od = output.data;\n  var downSample = options.scoreDownSample;\n  var invDownSample = 1 / downSample;\n  var outputHeightDownSample = output.height * downSample;\n  var outputWidthDownSample = output.width * downSample;\n  var outputWidth = output.width;\n\n  for (var y = 0; y < outputHeightDownSample; y += downSample) {\n    for (var x = 0; x < outputWidthDownSample; x += downSample) {\n      var p = (~~(y * invDownSample) * outputWidth + ~~(x * invDownSample)) * 4;\n      var i = importance(options, crop, x, y);\n      var detail = od[p + 1] / 255;\n\n      result.skin += od[p] / 255 * (detail + options.skinBias) * i;\n      result.detail += detail * i;\n      result.saturation += od[p + 2] / 255 * (detail + options.saturationBias) * i;\n      result.boost += od[p + 3] / 255 * i;\n    }\n  }\n\n  result.total = (result.detail * options.detailWeight +\n                  result.skin * options.skinWeight +\n                  result.saturation * options.saturationWeight +\n                  result.boost * options.boostWeight) / (crop.width * crop.height);\n  return result;\n}\n\nfunction importance(options, crop, x, y) {\n  if (crop.x > x || x >= crop.x + crop.width || crop.y > y || y >= crop.y + crop.height) {\n    return options.outsideImportance;\n  }\n  x = (x - crop.x) / crop.width;\n  y = (y - crop.y) / crop.height;\n  var px = abs(0.5 - x) * 2;\n  var py = abs(0.5 - y) * 2;\n  // Distance from edge\n  var dx = Math.max(px - 1.0 + options.edgeRadius, 0);\n  var dy = Math.max(py - 1.0 + options.edgeRadius, 0);\n  var d = (dx * dx + dy * dy) * options.edgeWeight;\n  var s = 1.41 - sqrt(px * px + py * py);\n  if (options.ruleOfThirds) {\n    s += (Math.max(0, s + d + 0.5) * 1.2) * (thirds(px) + thirds(py));\n  }\n  return s + d;\n}\nsmartcrop.importance = importance;\n\nfunction skinColor(options, r, g, b) {\n  var mag = sqrt(r * r + g * g + b * b);\n  var rd = (r / mag - options.skinColor[0]);\n  var gd = (g / mag - options.skinColor[1]);\n  var bd = (b / mag - options.skinColor[2]);\n  var d = sqrt(rd * rd + gd * gd + bd * bd);\n  return 1 - d;\n}\n\nfunction analyse(options, input) {\n  var result = {};\n  var output = new ImgData(input.width, input.height);\n\n  edgeDetect(input, output);\n  skinDetect(options, input, output);\n  saturationDetect(options, input, output);\n  applyBoosts(options, output);\n\n  var scoreOutput = downSample(output, options.scoreDownSample);\n\n  var topScore = -Infinity;\n  var topCrop = null;\n  var crops = generateCrops(options, input.width, input.height);\n\n  for (var i = 0, iLen = crops.length; i < iLen; i++) {\n    var crop = crops[i];\n    crop.score = score(options, scoreOutput, crop);\n    if (crop.score.total > topScore) {\n      topCrop = crop;\n      topScore = crop.score.total;\n    }\n\n  }\n\n  result.topCrop = topCrop;\n\n  if (options.debug && topCrop) {\n    result.crops = crops;\n    result.debugOutput = output;\n    result.debugOptions = options;\n    // Create a copy which will not be adjusted by the post scaling of smartcrop.crop\n    result.debugTopCrop = extend({}, result.topCrop);\n  }\n  return result;\n}\n\nfunction ImgData(width, height, data) {\n  this.width = width;\n  this.height = height;\n  if (data) {\n    this.data = new Uint8ClampedArray(data);\n  }\n  else {\n    this.data = new Uint8ClampedArray(width * height * 4);\n  }\n}\nsmartcrop.ImgData = ImgData;\n\nfunction downSample(input, factor) {\n  var idata = input.data;\n  var iwidth = input.width;\n  var width = Math.floor(input.width / factor);\n  var height = Math.floor(input.height / factor);\n  var output = new ImgData(width, height);\n  var data = output.data;\n  var ifactor2 = 1 / (factor * factor);\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var i = (y * width + x) * 4;\n\n      var r = 0;\n      var g = 0;\n      var b = 0;\n      var a = 0;\n\n      var mr = 0;\n      var mg = 0;\n      var mb = 0;\n\n      for (var v = 0; v < factor; v++) {\n        for (var u = 0; u < factor; u++) {\n          var j = ((y * factor + v) * iwidth + (x * factor + u)) * 4;\n          r += idata[j];\n          g += idata[j + 1];\n          b += idata[j + 2];\n          a += idata[j + 3];\n          mr = Math.max(mr, idata[j]);\n          mg = Math.max(mg, idata[j + 1]);\n          mb = Math.max(mb, idata[j + 2]);\n        }\n      }\n      // this is some funky magic to preserve detail a bit more for\n      // skin (r) and detail (g). Saturation (b) does not get this boost.\n      data[i] = r * ifactor2 * 0.5 + mr * 0.5;\n      data[i + 1] = g * ifactor2 * 0.7 + mg * 0.3;\n      data[i + 2] = b * ifactor2;\n      data[i + 3] = a * ifactor2;\n    }\n  }\n  return output;\n}\nsmartcrop._downSample = downSample;\n\nfunction defaultCanvasFactory(w, h) {\n  var c = document.createElement('canvas');\n  c.width = w;\n  c.height = h;\n  return c;\n}\n\nfunction canvasImageOperations(canvasFactory) {\n  return {\n    // Takes imageInput as argument\n    // returns an object which has at least\n    // {width: n, height: n}\n    open: function(image) {\n      // Work around images scaled in css by drawing them onto a canvas\n      var w = image.naturalWidth || image.width;\n      var h = image.naturalHeight || image.height;\n      var c = canvasFactory(w, h);\n      var ctx = c.getContext('2d');\n      if (image.naturalWidth && (image.naturalWidth != image.width || image.naturalHeight != image.height)) {\n        c.width = image.naturalWidth;\n        c.height = image.naturalHeight;\n      }\n      else {\n        c.width = image.width;\n        c.height = image.height;\n      }\n      ctx.drawImage(image, 0, 0);\n      return smartcrop.Promise.resolve(c);\n    },\n    // Takes an image (as returned by open), and changes it's size by resampling\n    resample: function(image, width, height) {\n      return Promise.resolve(image).then(function(image) {\n        var c = canvasFactory(~~width, ~~height);\n        var ctx = c.getContext('2d');\n\n        ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, c.width, c.height);\n        return smartcrop.Promise.resolve(c);\n      });\n    },\n    getData: function(image) {\n      return Promise.resolve(image).then(function(c) {\n        var ctx = c.getContext('2d');\n        var id = ctx.getImageData(0, 0, c.width, c.height);\n        return new ImgData(c.width, c.height, id.data);\n      });\n    },\n  };\n}\nsmartcrop._canvasImageOperations = canvasImageOperations;\n\n// Aliases and helpers\nvar min = Math.min;\nvar max = Math.max;\nvar abs = Math.abs;\nvar ceil = Math.ceil;\nvar sqrt = Math.sqrt;\n\nfunction extend(o) {\n  for (var i = 1, iLen = arguments.length; i < iLen; i++) {\n    var arg = arguments[i];\n    if (arg) {\n      for (var name in arg) {\n        o[name] = arg[name];\n      }\n    }\n  }\n  return o;\n}\n\n// Gets value in the range of [0, 1] where 0 is the center of the pictures\n// returns weight of rule of thirds [0, 1]\nfunction thirds(x) {\n  x = ((x - (1 / 3) + 1.0) % 2.0 * 0.5 - 0.5) * 16;\n  return Math.max(1.0 - x * x, 0.0);\n}\n\nfunction cie(r, g, b) {\n  return 0.5126 * b + 0.7152 * g + 0.0722 * r;\n}\nfunction sample(id, p) {\n  return cie(id[p], id[p + 1], id[p + 2]);\n}\nfunction saturation(r, g, b) {\n  var maximum = max(r / 255, g / 255, b / 255);\n  var minumum = min(r / 255, g / 255, b / 255);\n\n  if (maximum === minumum) {\n    return 0;\n  }\n\n  var l = (maximum + minumum) / 2;\n  var d = maximum - minumum;\n\n  return l > 0.5 ? d / (2 - maximum - minumum) : d / (maximum + minumum);\n}\n\n// Amd\nif (typeof define !== 'undefined' && define.amd) define(function() {return smartcrop;});\n// Common js\nif (typeof exports !== 'undefined') exports.smartcrop = smartcrop;\n// Browser\nelse if (typeof navigator !== 'undefined') window.SmartCrop = window.smartcrop = smartcrop;\n// Nodejs\nif (typeof module !== 'undefined') {\n  module.exports = smartcrop;\n}\n})();\n\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar smartcrop = exports.smartcrop;\n\nvar DMCProfilePage = function () {\n  _createClass(DMCProfilePage, null, [{\n    key: 'attachTo',\n    value: function attachTo(root) {\n      return new DMCProfilePage(root);\n    }\n  }]);\n\n  function DMCProfilePage(root) {\n    var _this = this;\n\n    _classCallCheck(this, DMCProfilePage);\n\n    this.root_ = root;\n    this.uploadButton_ = this.root_.querySelector('.dmc-profile-avatar__change');\n    this.avatar_ = this.root_.querySelector('.dmc-profile-avatar__media img');\n    this.onChange = function (event) {\n      var files = event.target.files;\n      if (files.length === 0 || files[0].type.indexOf('image') === -1) {\n        _this.showError('No images selected');\n      }\n\n      var reader = new FileReader();\n      reader.onload = function (readerEvent) {\n        var image = new Image();\n        image.onload = function () {\n          _this.crop(image).then(function (cropCanvas) {\n            _this.avatar_.src = cropCanvas.toDataURL('image/png');\n            _this.upload(cropCanvas);\n          }).catch(function (error) {\n            _this.showError(error.message || 'Image cropping error');\n          });\n        };\n        image.src = readerEvent.target.result;\n      };\n      reader.readAsDataURL(files[0]);\n    };\n\n    this.uploadButton_.addEventListener('change', this.onChange);\n  }\n\n  _createClass(DMCProfilePage, [{\n    key: 'crop',\n    value: function crop(image, onSuccess) {\n      var options = {\n        minScale: 1,\n        width: 256,\n        height: 256\n      };\n      return smartcrop.crop(image, options).then(function (result) {\n        var cropCanvas = document.createElement('canvas');\n        cropCanvas.width = 256;\n        cropCanvas.height = 256;\n        cropCanvas.getContext('2d').drawImage(image, result.topCrop.x, result.topCrop.y, result.topCrop.width, result.topCrop.height, 0, 0, 256, 256);\n        return cropCanvas;\n      });\n    }\n  }, {\n    key: 'upload',\n    value: function upload(canvas) {\n      var _this2 = this;\n\n      this.uploadButton_.classList.toggle('dmc-profile-avatar__change--disabled');\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('POST', window.location.search, true);\n      xhr.setRequestHeader('Turbolinks-Referrer', window.location);\n\n      xhr.onload = function (event) {\n        var location = xhr.getResponseHeader('turbolinks-location');\n        var snapshot = window.Turbolinks.Snapshot.wrap(xhr.response);\n\n        if (!location) {\n          location = window.location.href;\n        }\n\n        window.Turbolinks.controller.adapter.hideProgressBar();\n        window.Turbolinks.controller.cache.put(location, snapshot);\n        window.Turbolinks.visit(location, { action: 'restore' });\n        window.Turbolinks.clearCache();\n\n        if (xhr.status > 299) {\n          Turbolinks.controller.disable();\n        }\n      };\n\n      xhr.onerror = function (event) {\n        window.Turbolinks.controller.adapter.hideProgressBar();\n        _this2.uploadButton_.classList.toggle('dmc-profile-avatar__change--disabled');\n        _this2.showError('Request error');\n      };\n\n      window.Turbolinks.controller.adapter.showProgressBarAfterDelay();\n\n      canvas.toBlob(function (blob) {\n        var formData = new FormData(_this2.root_.querySelector('form'));\n        formData.append('avatar', blob, 'avatar.jpg');\n        xhr.send(formData);\n      });\n    }\n  }, {\n    key: 'showError',\n    value: function showError(message) {\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;\n\n      var snackbarEvent = new CustomEvent('DMCSnackbar:show', {\n        'detail': { message: message, timeout: timeout }\n      });\n      window.dispatchEvent(snackbarEvent);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.uploadButton_.removeEventListener('change', this.onChange);\n    }\n  }]);\n\n  return DMCProfilePage;\n}();\n\ndmc.register('DMCProfilePage', DMCProfilePage);","var exports = {}; // eslint-disable-line\n","/**\n * smartcrop.js\n * A javascript library implementing content aware image cropping\n *\n * Copyright (C) 2016 Jonas Wagner\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n(function() {\n'use strict';\n\nvar smartcrop = {};\n// Promise implementation to use\nsmartcrop.Promise = typeof Promise !== 'undefined' ? Promise : function() {\n  throw new Error('No native promises and smartcrop.Promise not set.');\n};\n\nsmartcrop.DEFAULTS = {\n  width: 0,\n  height: 0,\n  aspect: 0,\n  cropWidth: 0,\n  cropHeight: 0,\n  detailWeight: 0.2,\n  skinColor: [0.78, 0.57, 0.44],\n  skinBias: 0.01,\n  skinBrightnessMin: 0.2,\n  skinBrightnessMax: 1.0,\n  skinThreshold: 0.8,\n  skinWeight: 1.8,\n  saturationBrightnessMin: 0.05,\n  saturationBrightnessMax: 0.9,\n  saturationThreshold: 0.4,\n  saturationBias: 0.2,\n  saturationWeight: 0.3,\n  // Step * minscale rounded down to the next power of two should be good\n  scoreDownSample: 8,\n  step: 8,\n  scaleStep: 0.1,\n  minScale: 1.0,\n  maxScale: 1.0,\n  edgeRadius: 0.4,\n  edgeWeight: -20.0,\n  outsideImportance: -0.5,\n  boostWeight: 100.0,\n  ruleOfThirds: true,\n  prescale: true,\n  imageOperations: null,\n  canvasFactory: defaultCanvasFactory,\n  // Factory: defaultFactories,\n  debug: false,\n};\n\n\n\nsmartcrop.crop = function(inputImage, options_, callback) {\n  var options = extend({}, smartcrop.DEFAULTS, options_);\n\n  if (options.aspect) {\n    options.width = options.aspect;\n    options.height = 1;\n  }\n\n  if (options.imageOperations === null) {\n    options.imageOperations = canvasImageOperations(options.canvasFactory);\n  }\n\n  var iop = options.imageOperations;\n\n  var scale = 1;\n  var prescale = 1;\n\n  return iop.open(inputImage, options.input).then(function(image) {\n\n    if (options.width && options.height) {\n      scale = min(image.width / options.width, image.height / options.height);\n      options.cropWidth = ~~(options.width * scale);\n      options.cropHeight = ~~(options.height * scale);\n      // Img = 100x100, width = 95x95, scale = 100/95, 1/scale > min\n      // don't set minscale smaller than 1/scale\n      // -> don't pick crops that need upscaling\n      options.minScale = min(options.maxScale, max(1 / scale, options.minScale));\n\n      if (options.prescale !== false) {\n        prescale = 1 / scale / options.minScale;\n        if (prescale < 1) {\n          image = iop.resample(image, image.width * prescale, image.height * prescale);\n          options.cropWidth = ~~(options.cropWidth * prescale);\n          options.cropHeight = ~~(options.cropHeight * prescale);\n          if (options.boost) {\n            options.boost = options.boost.map(function(boost) {\n              return {\n                x: ~~(boost.x * prescale),\n                y: ~~(boost.y * prescale),\n                width: ~~(boost.width * prescale),\n                height: ~~(boost.height * prescale),\n                weight: boost.weight\n              };\n            });\n          }\n        }\n        else {\n          prescale = 1;\n        }\n      }\n    }\n    return image;\n  })\n  .then(function(image) {\n    return iop.getData(image).then(function(data) {\n      var result = analyse(options, data);\n\n      var crops = result.crops || [result.topCrop];\n      for (var i = 0, iLen = crops.length; i < iLen; i++) {\n        var crop = crops[i];\n        crop.x = ~~(crop.x / prescale);\n        crop.y = ~~(crop.y / prescale);\n        crop.width = ~~(crop.width / prescale);\n        crop.height = ~~(crop.height / prescale);\n      }\n      if (callback) callback(result);\n      return result;\n    });\n  });\n};\n\n\n// Check if all the dependencies are there\n// todo:\nsmartcrop.isAvailable = function(options) {\n  if (!smartcrop.Promise) return false;\n\n  var canvasFactory = options ? options.canvasFactory : defaultCanvasFactory;\n\n  if (canvasFactory === defaultCanvasFactory) {\n    var c = document.createElement('canvas');\n    if (!c.getContext('2d')) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction edgeDetect(i, o) {\n  var id = i.data;\n  var od = o.data;\n  var w = i.width;\n  var h = i.height;\n\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var p = (y * w + x) * 4;\n      var lightness;\n\n      if (x === 0 || x >= w - 1 || y === 0 || y >= h - 1) {\n        lightness = sample(id, p);\n      }\n      else {\n        lightness = sample(id, p) * 4 -\n            sample(id, p - w * 4) -\n            sample(id, p - 4) -\n            sample(id, p + 4) -\n            sample(id, p + w * 4);\n      }\n\n      od[p + 1] = lightness;\n    }\n  }\n}\n\nfunction skinDetect(options, i, o) {\n  var id = i.data;\n  var od = o.data;\n  var w = i.width;\n  var h = i.height;\n\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var p = (y * w + x) * 4;\n      var lightness = cie(id[p], id[p + 1], id[p + 2]) / 255;\n      var skin = skinColor(options, id[p], id[p + 1], id[p + 2]);\n      var isSkinColor = skin > options.skinThreshold;\n      var isSkinBrightness = lightness >= options.skinBrightnessMin && lightness <= options.skinBrightnessMax;\n      if (isSkinColor && isSkinBrightness) {\n        od[p] = (skin - options.skinThreshold) * (255 / (1 - options.skinThreshold));\n      }\n      else {\n        od[p] = 0;\n      }\n    }\n  }\n}\n\nfunction saturationDetect(options, i, o) {\n  var id = i.data;\n  var od = o.data;\n  var w = i.width;\n  var h = i.height;\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var p = (y * w + x) * 4;\n\n      var lightness = cie(id[p], id[p + 1], id[p + 2]) / 255;\n      var sat = saturation(id[p], id[p + 1], id[p + 2]);\n\n      var acceptableSaturation = sat > options.saturationThreshold;\n      var acceptableLightness = lightness >= options.saturationBrightnessMin &&\n          lightness <= options.saturationBrightnessMax;\n      if (acceptableLightness && acceptableLightness) {\n        od[p + 2] = (sat - options.saturationThreshold) * (255 / (1 - options.saturationThreshold));\n      }\n      else {\n        od[p + 2] = 0;\n      }\n    }\n  }\n}\n\nfunction applyBoosts(options, output) {\n  if (!options.boost) return;\n  var od = output.data;\n  for (var i = 0; i < output.width; i += 4) {\n    od[i + 3] = 0;\n  }\n  for (i = 0; i < options.boost.length; i++) {\n    applyBoost(options.boost[i], options, output);\n  }\n}\n\nfunction applyBoost(boost, options, output) {\n  var od = output.data;\n  var w = output.width;\n  var x0 = ~~boost.x;\n  var x1 = ~~(boost.x + boost.width);\n  var y0 = ~~boost.y;\n  var y1 = ~~(boost.y + boost.height);\n  var weight = boost.weight * 255;\n  for (var y = y0; y < y1; y++) {\n    for (var x = x0; x < x1; x++) {\n      var i = (y * w + x) * 4;\n      od[i + 3] += weight;\n    }\n  }\n}\n\nfunction generateCrops(options, width, height) {\n  var results = [];\n  var minDimension = min(width, height);\n  var cropWidth = options.cropWidth || minDimension;\n  var cropHeight = options.cropHeight || minDimension;\n  for (var scale = options.maxScale; scale >= options.minScale; scale -= options.scaleStep) {\n    for (var y = 0; y + cropHeight * scale <= height; y += options.step) {\n      for (var x = 0; x + cropWidth * scale <= width; x += options.step) {\n        results.push({\n          x: x,\n          y: y,\n          width: cropWidth * scale,\n          height: cropHeight * scale,\n        });\n      }\n    }\n  }\n  return results;\n}\n\nfunction score(options, output, crop) {\n  var result = {\n    detail: 0,\n    saturation: 0,\n    skin: 0,\n    boost: 0,\n    total: 0,\n  };\n\n  var od = output.data;\n  var downSample = options.scoreDownSample;\n  var invDownSample = 1 / downSample;\n  var outputHeightDownSample = output.height * downSample;\n  var outputWidthDownSample = output.width * downSample;\n  var outputWidth = output.width;\n\n  for (var y = 0; y < outputHeightDownSample; y += downSample) {\n    for (var x = 0; x < outputWidthDownSample; x += downSample) {\n      var p = (~~(y * invDownSample) * outputWidth + ~~(x * invDownSample)) * 4;\n      var i = importance(options, crop, x, y);\n      var detail = od[p + 1] / 255;\n\n      result.skin += od[p] / 255 * (detail + options.skinBias) * i;\n      result.detail += detail * i;\n      result.saturation += od[p + 2] / 255 * (detail + options.saturationBias) * i;\n      result.boost += od[p + 3] / 255 * i;\n    }\n  }\n\n  result.total = (result.detail * options.detailWeight +\n                  result.skin * options.skinWeight +\n                  result.saturation * options.saturationWeight +\n                  result.boost * options.boostWeight) / (crop.width * crop.height);\n  return result;\n}\n\nfunction importance(options, crop, x, y) {\n  if (crop.x > x || x >= crop.x + crop.width || crop.y > y || y >= crop.y + crop.height) {\n    return options.outsideImportance;\n  }\n  x = (x - crop.x) / crop.width;\n  y = (y - crop.y) / crop.height;\n  var px = abs(0.5 - x) * 2;\n  var py = abs(0.5 - y) * 2;\n  // Distance from edge\n  var dx = Math.max(px - 1.0 + options.edgeRadius, 0);\n  var dy = Math.max(py - 1.0 + options.edgeRadius, 0);\n  var d = (dx * dx + dy * dy) * options.edgeWeight;\n  var s = 1.41 - sqrt(px * px + py * py);\n  if (options.ruleOfThirds) {\n    s += (Math.max(0, s + d + 0.5) * 1.2) * (thirds(px) + thirds(py));\n  }\n  return s + d;\n}\nsmartcrop.importance = importance;\n\nfunction skinColor(options, r, g, b) {\n  var mag = sqrt(r * r + g * g + b * b);\n  var rd = (r / mag - options.skinColor[0]);\n  var gd = (g / mag - options.skinColor[1]);\n  var bd = (b / mag - options.skinColor[2]);\n  var d = sqrt(rd * rd + gd * gd + bd * bd);\n  return 1 - d;\n}\n\nfunction analyse(options, input) {\n  var result = {};\n  var output = new ImgData(input.width, input.height);\n\n  edgeDetect(input, output);\n  skinDetect(options, input, output);\n  saturationDetect(options, input, output);\n  applyBoosts(options, output);\n\n  var scoreOutput = downSample(output, options.scoreDownSample);\n\n  var topScore = -Infinity;\n  var topCrop = null;\n  var crops = generateCrops(options, input.width, input.height);\n\n  for (var i = 0, iLen = crops.length; i < iLen; i++) {\n    var crop = crops[i];\n    crop.score = score(options, scoreOutput, crop);\n    if (crop.score.total > topScore) {\n      topCrop = crop;\n      topScore = crop.score.total;\n    }\n\n  }\n\n  result.topCrop = topCrop;\n\n  if (options.debug && topCrop) {\n    result.crops = crops;\n    result.debugOutput = output;\n    result.debugOptions = options;\n    // Create a copy which will not be adjusted by the post scaling of smartcrop.crop\n    result.debugTopCrop = extend({}, result.topCrop);\n  }\n  return result;\n}\n\nfunction ImgData(width, height, data) {\n  this.width = width;\n  this.height = height;\n  if (data) {\n    this.data = new Uint8ClampedArray(data);\n  }\n  else {\n    this.data = new Uint8ClampedArray(width * height * 4);\n  }\n}\nsmartcrop.ImgData = ImgData;\n\nfunction downSample(input, factor) {\n  var idata = input.data;\n  var iwidth = input.width;\n  var width = Math.floor(input.width / factor);\n  var height = Math.floor(input.height / factor);\n  var output = new ImgData(width, height);\n  var data = output.data;\n  var ifactor2 = 1 / (factor * factor);\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var i = (y * width + x) * 4;\n\n      var r = 0;\n      var g = 0;\n      var b = 0;\n      var a = 0;\n\n      var mr = 0;\n      var mg = 0;\n      var mb = 0;\n\n      for (var v = 0; v < factor; v++) {\n        for (var u = 0; u < factor; u++) {\n          var j = ((y * factor + v) * iwidth + (x * factor + u)) * 4;\n          r += idata[j];\n          g += idata[j + 1];\n          b += idata[j + 2];\n          a += idata[j + 3];\n          mr = Math.max(mr, idata[j]);\n          mg = Math.max(mg, idata[j + 1]);\n          mb = Math.max(mb, idata[j + 2]);\n        }\n      }\n      // this is some funky magic to preserve detail a bit more for\n      // skin (r) and detail (g). Saturation (b) does not get this boost.\n      data[i] = r * ifactor2 * 0.5 + mr * 0.5;\n      data[i + 1] = g * ifactor2 * 0.7 + mg * 0.3;\n      data[i + 2] = b * ifactor2;\n      data[i + 3] = a * ifactor2;\n    }\n  }\n  return output;\n}\nsmartcrop._downSample = downSample;\n\nfunction defaultCanvasFactory(w, h) {\n  var c = document.createElement('canvas');\n  c.width = w;\n  c.height = h;\n  return c;\n}\n\nfunction canvasImageOperations(canvasFactory) {\n  return {\n    // Takes imageInput as argument\n    // returns an object which has at least\n    // {width: n, height: n}\n    open: function(image) {\n      // Work around images scaled in css by drawing them onto a canvas\n      var w = image.naturalWidth || image.width;\n      var h = image.naturalHeight || image.height;\n      var c = canvasFactory(w, h);\n      var ctx = c.getContext('2d');\n      if (image.naturalWidth && (image.naturalWidth != image.width || image.naturalHeight != image.height)) {\n        c.width = image.naturalWidth;\n        c.height = image.naturalHeight;\n      }\n      else {\n        c.width = image.width;\n        c.height = image.height;\n      }\n      ctx.drawImage(image, 0, 0);\n      return smartcrop.Promise.resolve(c);\n    },\n    // Takes an image (as returned by open), and changes it's size by resampling\n    resample: function(image, width, height) {\n      return Promise.resolve(image).then(function(image) {\n        var c = canvasFactory(~~width, ~~height);\n        var ctx = c.getContext('2d');\n\n        ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, c.width, c.height);\n        return smartcrop.Promise.resolve(c);\n      });\n    },\n    getData: function(image) {\n      return Promise.resolve(image).then(function(c) {\n        var ctx = c.getContext('2d');\n        var id = ctx.getImageData(0, 0, c.width, c.height);\n        return new ImgData(c.width, c.height, id.data);\n      });\n    },\n  };\n}\nsmartcrop._canvasImageOperations = canvasImageOperations;\n\n// Aliases and helpers\nvar min = Math.min;\nvar max = Math.max;\nvar abs = Math.abs;\nvar ceil = Math.ceil;\nvar sqrt = Math.sqrt;\n\nfunction extend(o) {\n  for (var i = 1, iLen = arguments.length; i < iLen; i++) {\n    var arg = arguments[i];\n    if (arg) {\n      for (var name in arg) {\n        o[name] = arg[name];\n      }\n    }\n  }\n  return o;\n}\n\n// Gets value in the range of [0, 1] where 0 is the center of the pictures\n// returns weight of rule of thirds [0, 1]\nfunction thirds(x) {\n  x = ((x - (1 / 3) + 1.0) % 2.0 * 0.5 - 0.5) * 16;\n  return Math.max(1.0 - x * x, 0.0);\n}\n\nfunction cie(r, g, b) {\n  return 0.5126 * b + 0.7152 * g + 0.0722 * r;\n}\nfunction sample(id, p) {\n  return cie(id[p], id[p + 1], id[p + 2]);\n}\nfunction saturation(r, g, b) {\n  var maximum = max(r / 255, g / 255, b / 255);\n  var minumum = min(r / 255, g / 255, b / 255);\n\n  if (maximum === minumum) {\n    return 0;\n  }\n\n  var l = (maximum + minumum) / 2;\n  var d = maximum - minumum;\n\n  return l > 0.5 ? d / (2 - maximum - minumum) : d / (maximum + minumum);\n}\n\n// Amd\nif (typeof define !== 'undefined' && define.amd) define(function() {return smartcrop;});\n// Common js\nif (typeof exports !== 'undefined') exports.smartcrop = smartcrop;\n// Browser\nelse if (typeof navigator !== 'undefined') window.SmartCrop = window.smartcrop = smartcrop;\n// Nodejs\nif (typeof module !== 'undefined') {\n  module.exports = smartcrop;\n}\n})();\n","let smartcrop = exports.smartcrop;\n\nclass DMCProfilePage {\n  static attachTo(root) {\n    return new DMCProfilePage(root);\n  }\n\n  constructor(root) {\n    this.root_ = root;\n    this.uploadButton_ = this.root_.querySelector('.dmc-profile-avatar__change');\n    this.avatar_ = this.root_.querySelector('.dmc-profile-avatar__media img');\n    this.onChange = (event) => {\n      let files = event.target.files;\n      if (files.length === 0 || files[0].type.indexOf('image') === -1) {\n        this.showError('No images selected');\n      }\n\n      let reader = new FileReader();\n      reader.onload = (readerEvent) => {\n        let image = new Image();\n        image.onload = () => {\n          this.crop(image).then((cropCanvas) => {\n            this.avatar_.src=cropCanvas.toDataURL('image/png');\n            this.upload(cropCanvas);\n          }).catch((error) => {\n            this.showError(error.message || 'Image cropping error');\n          });\n        };\n        image.src = readerEvent.target.result;\n      };\n      reader.readAsDataURL(files[0]);\n    };\n\n    this.uploadButton_.addEventListener('change', this.onChange);\n  }\n\n  crop(image, onSuccess) {\n    let options = {\n      minScale: 1,\n      width: 256,\n      height: 256,\n    };\n    return smartcrop.crop(image, options).then((result) => {\n      let cropCanvas = document.createElement('canvas');\n      cropCanvas.width = 256;\n      cropCanvas.height = 256;\n      cropCanvas.getContext('2d').drawImage(\n        image,\n        result.topCrop.x, result.topCrop.y, result.topCrop.width, result.topCrop.height,\n        0, 0, 256, 256\n      );\n      return cropCanvas;\n    });\n  }\n\n  upload(canvas) {\n    this.uploadButton_.classList.toggle('dmc-profile-avatar__change--disabled');\n\n    let xhr = new XMLHttpRequest();\n    xhr.open('POST', window.location.search, true);\n    xhr.setRequestHeader('Turbolinks-Referrer', window.location);\n\n    xhr.onload = (event) => {\n      let location = xhr.getResponseHeader('turbolinks-location');\n      let snapshot = window.Turbolinks.Snapshot.wrap(xhr.response);\n\n      if (!location) {\n        location = window.location.href;\n      }\n\n      window.Turbolinks.controller.adapter.hideProgressBar();\n      window.Turbolinks.controller.cache.put(location, snapshot);\n      window.Turbolinks.visit(location, {action: 'restore'});\n      window.Turbolinks.clearCache();\n\n      if (xhr.status > 299) {\n        Turbolinks.controller.disable();\n      }\n    };\n\n    xhr.onerror = (event) => {\n      window.Turbolinks.controller.adapter.hideProgressBar();\n      this.uploadButton_.classList.toggle('dmc-profile-avatar__change--disabled');\n      this.showError('Request error');\n    };\n\n    window.Turbolinks.controller.adapter.showProgressBarAfterDelay();\n\n    canvas.toBlob((blob) => {\n      let formData = new FormData(this.root_.querySelector('form'));\n      formData.append('avatar', blob, 'avatar.jpg');\n      xhr.send(formData);\n    });\n  }\n\n  showError(message, timeout=2000) {\n    let snackbarEvent = new CustomEvent('DMCSnackbar:show', {\n      'detail': {message: message, timeout: timeout},\n    });\n    window.dispatchEvent(snackbarEvent);\n  }\n\n  destroy() {\n    this.uploadButton_.removeEventListener('change', this.onChange);\n  }\n}\n\ndmc.register('DMCProfilePage', DMCProfilePage);\n"]}